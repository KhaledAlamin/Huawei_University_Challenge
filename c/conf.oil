/* ###*B*###
 * Erika Enterprise, version 3
 * 
 * Copyright (C) 2017 - 2018 Evidence s.r.l.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License, version 2, for more details.
 * 
 * You should have received a copy of the GNU General Public License,
 * version 2, along with this program; if not, see
 * < www.gnu.org/licenses/old-licenses/gpl-2.0.html >.
 * 
 * This program is distributed to you subject to the following
 * clarifications and special exceptions to the GNU General Public
 * License, version 2.
 * 
 * THIRD PARTIES' MATERIALS
 * 
 * Certain materials included in this library are provided by third
 * parties under licenses other than the GNU General Public License. You
 * may only use, copy, link to, modify and redistribute this library
 * following the terms of license indicated below for third parties'
 * materials.
 * 
 * In case you make modified versions of this library which still include
 * said third parties' materials, you are obligated to grant this special
 * exception.
 * 
 * The complete list of Third party materials allowed with ERIKA
 * Enterprise version 3, together with the terms and conditions of each
 * license, is present in the file THIRDPARTY.TXT in the root of the
 * project.
 * ###*E*### */

/** \file	conf.oil
 *  \brief	System Configuration.
 *
 *  This file contains the System Configuration for Erika Enterprise.
 *
 *  \author	Giuseppe Serano
 *  \date	2018
 */

CPU mySystem {

  OS myOs {
    EE_OPT = "OS_EE_APPL_BUILD_DEBUG";
    EE_OPT = "OS_EE_BUILD_DEBUG";
//    EE_OPT = "OS_EE_VERBOSE";

    CPU_DATA = CORTEX_M {
//      MODEL = M4;	/* No FPU SUpport */
      MODEL = M4F;	/* FPU Support */
      MULTI_STACK = TRUE;
      IDLEHOOK = TRUE {
        HOOKNAME = "idle_hook";
      };
      CPU_CLOCK = 180.00;
      COMPILER = GCC {
        VERSION = "7.3.1";
      };
    };

    LDFLAGS="-specs=nano.specs -specs=nosys.specs";

    MCU_DATA = STM32F4 {
      MODEL = STM32F429XX;
    };

    BOARD_DATA = STM32F429I_DISC1;

    LIB = STM32_CUBE_F4 {
      /* Used to select Board: STM32F429I_DISC1 */
      BOARD = STM32F429I_DISC1;
      /* Used to select library version. */
      VERSION = "1.24.0";
      /* Create libstm32cubef4.a */
      STAND_ALONE = TRUE;
    };

    STATUS = EXTENDED;
    STARTUPHOOK = TRUE;
    ERRORHOOK = FALSE;
    SHUTDOWNHOOK = FALSE;
    PRETASKHOOK = FALSE;
    POSTTASKHOOK = FALSE;
    USEGETSERVICEID = FALSE;
    USEPARAMETERACCESS = FALSE;
    USERESSCHEDULER = TRUE;

    USEORTI = TRUE;

  };

  APPDATA myApp {
    APP_SRC = "code.c";
    APP_SRC = "hal.c";
  };

  /* this is the OIL part for the task displaying the christmas tree */
  TASK Task1 {
    PRIORITY = 1;	/* Low priority */
    AUTOSTART = FALSE;
    STACK = SHARED;
    ACTIVATION = 1;	/* only one pending activation */
  };

  /* this is the OIL part for the task activated by the button press */
  TASK Task2 {
    PRIORITY = 2;	/* High priority */
    SCHEDULE = FULL;
    AUTOSTART = TRUE;
    STACK = SHARED;
  };

  TASK Task3 {
    PRIORITY = 2;	/* High priority */
    SCHEDULE = FULL;
    AUTOSTART = TRUE;
    STACK = SHARED;
  };
  ISR TimerISR {
    CATEGORY = 2;
    SOURCE = "TIM3";
    PRIORITY = 1;
  };

 /* ISR SerialISR {
    CATEGORY = 1;
    SOURCE = "USART1";
    PRIORITY = 9;
  };
  */
  ISR UART_ISR {
    CATEGORY = 2;
    SOURCE = "USART1";
    PRIORITY = 9;
  };

	
  ISR ButtonsISR {
    CATEGORY = 2;
    SOURCE   = "EXTI0";
    PRIORITY = 2;
  };

  ISR TouchISR {
    CATEGORY = 2;
    SOURCE   = "EXTI15_10";
    PRIORITY = 3;
  };

  /*
   * Please uncomment ONLY one of the following configurations at a time!
   */

  /* CONFIGURATION 1:
   * Kernel is BCC1
   * Task 1 is full preemptive
   */
  OS myOs { KERNEL_TYPE = OSEK { CLASS = BCC1; }; }; 
  TASK Task1 { SCHEDULE = FULL; };
  TASK Task2 { ACTIVATION = 1; };
  TASK Task3 { SCHEDULE = FULL;};

  /* ----------------------------------------------------------- */

  /* CONFIGURATION 2:
   * Same as Configuration 1, BUT Task 1 is NON preemptive
   */

//  OS myOs { KERNEL_TYPE = OSEK { CLASS = BCC1; }; }; 
//  TASK Task1 { SCHEDULE = NON; };
//  TASK Task2 { ACTIVATION = 1; };

  /* ----------------------------------------------------------- */

  /* CONFIGURATION 3:
   * Same as Configuration 2, BUT the code is compiled with an additional #define
   * that controls the presence of the Schedule() function inside Task1
   *
   * The additional define is added with the EEOPT = "..."; statement inside 
   * the OS object.
   */

//  OS myOs { CFLAGS = "-DMYSCHEDULE"; KERNEL_TYPE = OSEK { CLASS =  BCC1; }; };
//  TASK Task1 { SCHEDULE = NON; };
//  TASK Task2 { ACTIVATION = 1; };

  /* ----------------------------------------------------------- */

  /* CONFIGURATION 4:
   * Same as Configuration 3, BUT Task2 supports three pending activations.
   * The kernel type has to be BCC2 to support more than one pending activation!
   *
   * Note: This configuration does not work with the Demo version 
   * (which includes only a BCC1 kernel)
   */

//  OS myOs { CFLAGS = "-DMYSCHEDULE"; KERNEL_TYPE = OSEK { CLASS = BCC2; RQ = MQ; }; };
//  TASK Task1 { SCHEDULE = NON; };
//  TASK Task2 { ACTIVATION = 6; };

};
